---
layout: chapter
title: 'HTTP'
category: part2
---

{% include defs.markdown %}

In the previous chapter, I mentioned the large number of application protocols
that exist. You probably make use of many such protocols when you use the
Internet, but in this chapter we're going to focus on the king of application
protocols: the HyperText Transfer Protocol (HTTP).

Remember that thanks to the transport and Internet layers, we don't have to
worry at all about the technical details we discussed in the previous chapters.
When discussing the application layer, we can pretend that computers magically
send formatted data to each other just as easily as you might talk to another
person in the same room as you.
{: note}

You might know good ol' HTTP from your browser's address bar, where it is often
seen just ahead of the domain name. That's because HTTP is the backbone of the
_World Wide Web_: the interlinked multimedia web pages you view in your web
browser.

## Text ##

Before we dig into HTTP, we need a quick aside to discuss [data formats][fm].
Recall that one thing that a protocol requires agreement on is a data format to
use for communication. HTTP is a text-based protocol, meaning that much of its
communication is in the form of human-readable text. But of course we need a
binary format for storing that text in a computer. One such format is called
ASCII.

[fm]: {% post_url 2011-04-06-ch4 %}

**ASCII** is a simple text format where each byte represents a single character.
{: definition}

Well this isn't a play, so what do we mean by "character"?

A **character** is a single textual symbol. For example, upper and lower case
letters and punctuation symbols are all characters.
{: definition}

Here is a table translating between hexadecimal byte values and ASCII
characters:

    20  
    21 !
    22 "
    23 #
    24 $
    25 %
    26 &
    27 '
    28 (
    29 )
    2A *
    2B +
    2C ,
    2D -
    2E .
    2F /
    30 0
    31 1
    32 2
    33 3
    34 4
    35 5
    36 6
    37 7
    38 8
    39 9
    3A :
    3B ;
    3C <
    3D =
    3E >
    3F ?
    40 @
    41 A
    42 B
    43 C
    44 D
    45 E
    46 F
    47 G
    48 H
    49 I
    4A J
    4B K
    4C L
    4D M
    4E N
    4F O
    50 P
    51 Q
    52 R
    53 S
    54 T
    55 U
    56 V
    57 W
    58 X
    59 Y
    5A Z
    5B [
    5C \
    5D ]
    5E ^
    5F _
    60 `
    61 a
    62 b
    63 c
    64 d
    65 e
    66 f
    67 g
    68 h
    69 i
    6A j
    6B k
    6C l
    6D m
    6E n
    6F o
    70 p
    71 q
    72 r
    73 s
    74 t
    75 u
    76 v
    77 w
    78 x
    79 y
    7A z
    7B {
    7C |
    7D }
    7E ~

A few observations of this table:

* The first entry - 0x20 - translates to a space
* Digits are really easy to translate since 0-9 correspond to 0x30-0x39
* You can convert letters from upper case to lower case and vice versa by adding
  or subtracting 0x20
* There are a bunch of missing byte values: 0x00-0x1F and 0x7F-0xFF. The reason
  for some of these (0x80-0xFF) is because ASCII only uses 7 bits of each byte
  so only the first 128 byte values can be used. The other missing characters
  are "unprintable ASCII". They include characters representing line breaks and
  indentation or even "control characters" that can have special meaning to the
  program using the ASCII text

You might recall from the chapter on data formats that one goal of a format is
to identify the type of data to the computer. ASCII is such a simple format and
it is understood so widely that it doesn't bother with such things. Instead it
is common for a computer to simply scan the bytes of data and, if they all fall
within the ASCII range (less than 0x80), assume that the data are ASCII.

<div>
Translate the following bytes into text using the ASCII format:

    55 73 69 6e 67 20 41 53 43 49 49 20 69 73 20 65 61 73 79 21
</div>
{: exercise}

Those are the basics of ASCII. Again, you don't need to worry about the details
of ASCII as we move on. I just wanted to give you an idea of how computers
handle all of the text we'll be seeing later on.

## HTML ##

Now that we know how computers read text, this opens up a world of text formats.
Just like how a data format agrees on the meaning of binary data, a text format
agrees on the meaning of text (which itself might be stored in a binary data
format like ASCII).

HyperText Markup Language (HTML) is one such text format. The purpose of HTML is
to enrich plain text with additional meaning. For example, consider this text:

    The rare original heartsbleed goes,
    Spends in the earthen hide, in the folds and wizenings, flows
    In the gutters of the banked and staring eyes. He lies
    As still as if he would return to stone,

    Richard Wilbur, The Death of a Toad

From the context you can probably tell that this is a quotation, but computers
aren't so good at guessing such things. They like to have things all spelled
out. Let's _mark up_ this text with HTML to make the meaning explicit.

    <!DOCTYPE html>
    <html>
      <body>
        The rare original heartsbleed goes,
        Spends in the earthen hide, in the folds and wizenings, flows
        In the gutters of the banked and staring eyes. He lies
        As still as if he would return to stone,

        Richard Wilbur, The Death of a Toad
      </body>
    </html>

It's easy to spot the HTML parts because they are all wrapped in angled brackets
`<like this>`. These bracketed bits are called "tags". The tags we've added are
the bare minimum to identify this as an HTML document. Let's examine each tag's
meaning.

The `DOCTYPE` tag at the top lets the computer know that this is an HTML
document. Next is an `<html>` tag.  You will notice another similar tag at the
bottom: `</html>`. The `/` at the beginning of the tag tells us that these two
tags are a pair. This tells us that everything between `<html>` and `</html>`
is HTML. These two tags always wrap the contents of an HTML document. Next we
see another pair of tags: `<body>` and `</body>`. These tags enclose the body of
our text.

As I said, this is just the bare minimum. Let's add interesting stuff.

    <!DOCTYPE html>
    <html>
      <body>
        <p>
          The rare original heartsbleed goes,<br/>
          Spends in the earthen hide, in the folds and wizenings, flows<br/>
          In the gutters of the banked and staring eyes. He lies<br/>
          As still as if he would return to stone,
        </p>
        Richard Wilbur, The Death of a Toad
      </body>
    </html>

Here we've identified the stanza of the poem as a **p**aragraph using `<p>` tags
and we've added `<br/>` tags and the end of each line to indicate line
**br**eaks. The `/` at the _end_ of the `br` tag indicates that each tag is on
its own and doesn't have a matching `</br>` later in the document. This teaches
us an important lesson about HTML.

**HyperText Markup Language** (HTML) is a language for describing the
_structure_ and _meaning_ of text, with no regard to its appearance.
{: definition}

We humans understand the difference in meaning between line breaks in a
paragraph and line breaks in a poem. We understand from context how the name
following a quoted paragraph is not part of the quotation itself but a citation.
HTML needs all of these implicit meanings to be made clear: line breaks are
assumed to be meaningless unless specified; text is assumed to be grouped
together unless separated into paragraphs.

HTML also provides tags for marking up quotations:

    <!DOCTYPE html>
    <html>
      <body>
        <blockquote>
          <p>
            The rare original heartsbleed goes,<br/>
            Spends in the earthen hide, in the folds and wizenings, flows<br/>
            In the gutters of the banked and staring eyes. He lies<br/>
            As still as if he would return to stone,
          </p>
          <cite>Richard Wilbur, The Death of a Toad</cite>
        </blockquote>
      </body>
    </html>

Now the association between the quotation and citation is clear. You might have
wondered earlier at the point of the `<body>` tag. What isn't part of the body
of text? Well, HTML provides another tag `<head>` in which you can place
information _about_ the document that isn't part of the document itself.

    <!DOCTYPE html>
    <html>
      <head>
        <title>My Favorite Poem</title>
      </head>
      <body>
        <blockquote>
          <p>
            The rare original heartsbleed goes,<br/>
            Spends in the earthen hide, in the folds and wizenings, flows<br/>
            In the gutters of the banked and staring eyes. He lies<br/>
            As still as if he would return to stone,
          </p>
          <cite>Richard Wilbur, The Death of a Toad</cite>
        </blockquote>
      </body>
    </html>

