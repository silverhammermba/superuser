---
layout: chapter
title: 'Layers'
category: part2
---

You are probably sick of protocols by now but hopefully I can convince you that
at least all of that effort was worth it. When you're dealing with computer
networks, there are some terms that you'll see popping up quite often:

* IP
* TCP
* UDP
* DHCP
* HTTP
* FTP
* IMAP
* SMTP

Notice anything? They all end with the letter P! And wouldn't you be surprised
to find that all of those Ps stand for protocol? It's a good thing you just
spent a chapter becoming a protocol master. Now it is time to put these
protocols to work.

In the previous chapter we saw an example of a concept that's going to get a lot
of use moving forward.

<div class="alert alert-warning">
A <strong>layer</strong> is a protocol that allows for the transmission of
arbitrary data.
</div>

For example, the protocols from the previous chapter could be described as
layers since the data formats can contain any kind of data. The advantage of
layers is that they allow us to split up the complicated task of communication
into bite-sized pieces.

## TCP ##

In the previous chapter, when we only needed to communicate between two
computers, one protocol (one layer) was all that was needed. If a computer sent
a packet, there was only one choice of recipient. Thus the protocol mostly
concerned itself with matters like error checking, packet ordering,
acknowledgement, etc.

The protocol we developed has a lot in common with the real-world Transmission
Control Protocol (TCP). More generically, TCP is a protocol for packaging and
transmitting information; but it is by no means the only such protocol.  The
User Datagram Protocol (UDP) performs a similar function. While TCP emphasizes
reliability of the transmission, UDP emphasizes simplicity and speed.

If I'm overloading your brain, don't worry. You can forget about these little
details because - as I said - both of these protocols do basically the same
thing.

<div class="alert alert-warning">
The <strong>transport layer</strong> is the protocol that is in charge of
packaging data for transmission.
</div>

To return to the analogy in the previous chapter, the transport layer tells you
how to package your data and how the sender and receiver should handle those
packages, but it doesn't mention how those packages will actually get to their
desination.

## IP ##

Now comes the interesting bit. We've packaged our data in the transport layer,
but how does it actually get where it needs to go? This is where the Internet
Protocol (IP) comes in.

The protocol itself is conceptually simple. In essence, it wraps the packet from
the transport layer in an additional packet describing who is sending the data,
and who the recipient should be. Then it simply sends it off to be delivered.

But who is it sending it to? How do they deliver it? To understand this we first
need to make a little digression.

<div class="well pull-right">
<img src="{{ site.baseurl }}/img/isp.png" alt='The connection to your ISP'/>
</div>

When you sign up for an Internet service with your cable company, what you're
really buying is the privilege of connecting your computer to a special kind of
computer called a _router_. That's it. It's just as simple as in the previous
chapter where we had two computers connected directly to each other. What's
special about a router is that it is designed to be connnected to many computers
at once.

All of the computers connected to a router are assigned _addresses_ which
identify them to the router - just like how the addresses of the homes in your
neighborhood identify them to the local post office. These computer addresses
have a very specific form.

<div class="alert alert-warning">
An <strong>IP address</strong> is a 4 byte number identifying a computer on a
network. By convention, each byte is written in decimal with periods separating
bytes e.g. 192.168.1.1 or 255.255.255.0
</div>

This situation - many computers connected to a single router - is called a local
network. The router (again, like a post office) acts as a mediator for messages
between other computers. If two computers in the network wish to communicate,
they don't need to be directly connected, instead they can hand their messages
off to the router and it will perform the exchange.

The situation starts becoming amazing when your router is connected to the
router of a different local network. Now computers in both local networks can
communicate! Imagine that you want to send a message to a computer in the other
network. First you send the message to your router as usual, the router thinks
"I'm not connected to that computer" so it sends it on to the other router. That
router _is_ connected to the other computer, so it can deliver the message. The
beauty of this system is that each router only needs to know two things:

1. The addresses of the computers connected to it
2. The addresses of the other routers connected to it

Again, this system functions very similar to the postal service. Your local post
office doesn't know (or care) how to deliver a package to an address in another
state: they simply forward the package to another post office that might know.
This is the essence of the Internet - a network of interconnected routers all
serving their own local networks and forwarding data to each other.

<div class="alert alert-warning">
I say "essence" because of course the reality is much more complicated than
that. To mention a few complications, there are heirarchies of routers
established to ensure efficient routing of network packets, there are special
provisions for the assignment of IP addresses, there are specialized routers in
the network for handling certain types of messages, and there is the complicated
matter of who owns all of these interlocking pieces.
</div>

<div class="alert alert-success">
Since an IP address has 4 bytes, that means that there are only 2<sup>32</sup> =
4,294,967,296 different IP addresses. Since every device connected to the
Internet needs an IP address, we're actually running out of them! Because of
this we're currently trying to transition to a new version of IP (version 6)
which has 128 bit addresses. IPv6 addresses are written in hexadecimal with
pairs of bytes separated by colons e.g. 2001:0db8:85a3:0042:1000:8a2e:0370:7334.
</div>
